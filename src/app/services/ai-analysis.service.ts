import { Injectable, inject } from '@angular/core';
import { GeminiService } from './gemini.service';
import { OpenaiService } from './openai.service';

export type AIProvider = 'gemini' | 'openai' | 'auto';

@Injectable({
  providedIn: 'root',
})
export class AiAnalysisService {
  private geminiService = inject(GeminiService);
  private openaiService = inject(OpenaiService);

  // Configuraci√≥n del proveedor preferido
  private preferredProvider: AIProvider = 'auto'; // Cambiar a 'gemini' u 'openai' para forzar uno espec√≠fico

  constructor() {
    console.log('ü§ñ Servicio de An√°lisis IA inicializado');
    console.log(`üìã Proveedor configurado: ${this.preferredProvider}`);
  }

  async analyzeJournalEntry(entry: string, goals: string[]): Promise<string> {
    console.log(`üîÑ Iniciando an√°lisis con proveedor: ${this.preferredProvider}`);

    if (this.preferredProvider === 'gemini') {
      return this.geminiService.analyzeJournalEntry(entry, goals);
    } else if (this.preferredProvider === 'openai') {
      return this.openaiService.analyzeJournalEntry(entry, goals);
    } else {
      // Modo 'auto': Intentar OpenAI primero, luego Gemini
      return this.tryWithFallback(entry, goals);
    }
  }

  private async tryWithFallback(entry: string, goals: string[]): Promise<string> {
    console.log('üîÑ Modo autom√°tico: Intentando OpenAI primero...');

    try {
      // Intentar con OpenAI primero (generalmente m√°s confiable)
      const result = await this.openaiService.analyzeJournalEntry(entry, goals);

      // Si la respuesta contiene "simulaci√≥n", significa que OpenAI no est√° disponible
      if (result.includes('simulaci√≥n de OpenAI')) {
        console.log('üîÑ OpenAI no disponible, intentando con Gemini...');
        return await this.geminiService.analyzeJournalEntry(entry, goals);
      }

      console.log('‚úÖ An√°lisis completado con OpenAI');
      return result;
    } catch (error) {
      console.log('üîÑ Error con OpenAI, intentando con Gemini...', error);

      try {
        const result = await this.geminiService.analyzeJournalEntry(entry, goals);
        console.log('‚úÖ An√°lisis completado con Gemini como fallback');
        return result;
      } catch (geminiError) {
        console.error('‚ùå Ambos servicios fallaron:', geminiError);

        // √öltima opci√≥n: simulaci√≥n local
        return this.localFallbackAnalysis(entry, goals);
      }
    }
  }

  private async localFallbackAnalysis(entry: string, goals: string[]): Promise<string> {
    console.log('üîÑ Usando an√°lisis local como √∫ltimo recurso...');

    // Simular delay
    await new Promise((resolve) => setTimeout(resolve, 1000));

    const goalsList =
      goals.length > 0
        ? goals.map((g) => `<strong>${g}</strong>`).join(', ')
        : 'tus objetivos personales';

    return `
      <h4>An√°lisis B√°sico de tu Reflexi√≥n</h4>
      <p>He procesado tu entrada de manera local. Aunque no puedo acceder a servicios de IA avanzados en este momento, puedo ofrecerte algunas reflexiones basadas en ${goalsList}.</p>
      
      <h4>Observaciones Generales</h4>
      <p>Tu capacidad de reflexionar por escrito es un excelente h√°bito para el crecimiento personal. El simple acto de poner tus pensamientos en palabras ya es un paso valioso hacia una mayor autoconciencia.</p>
      
      <h4>Sugerencia Pr√°ctica</h4>
      <ul>
        <li>Contin√∫a escribiendo regularmente. La consistencia en la reflexi√≥n personal es m√°s valiosa que la perfecci√≥n de cada entrada individual.</li>
      </ul>
      
      <p><strong>Nota:</strong> Este es un an√°lisis b√°sico local. Para obtener insights m√°s profundos y personalizados, configura una API key de OpenAI o Gemini.</p>
    `;
  }

  // M√©todo para cambiar el proveedor preferido din√°micamente
  setPreferredProvider(provider: AIProvider): void {
    this.preferredProvider = provider;
    console.log(`üìã Proveedor cambiado a: ${provider}`);
  }

  // M√©todo para obtener el proveedor actual
  getPreferredProvider(): AIProvider {
    return this.preferredProvider;
  }
}
