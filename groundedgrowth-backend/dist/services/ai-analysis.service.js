"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AIAnalysisService = void 0;
const gemini_service_1 = require("./gemini.service");
const openai_service_1 = require("./openai.service");
class AIAnalysisService {
    constructor(preferredProvider = 'auto') {
        this.geminiService = new gemini_service_1.GeminiService();
        this.openaiService = new openai_service_1.OpenAIService();
        this.preferredProvider = preferredProvider;
        console.log(`ü§ñ Servicio de An√°lisis IA inicializado con proveedor: ${preferredProvider}`);
    }
    async analyzeJournalEntry(entry, goals, provider) {
        const selectedProvider = provider || this.preferredProvider;
        console.log(`üîÑ Iniciando an√°lisis con proveedor: ${selectedProvider}`);
        if (selectedProvider === 'gemini') {
            const analysis = await this.geminiService.analyzeJournalEntry(entry, goals);
            return {
                analysis,
                aiProvider: 'gemini'
            };
        }
        else if (selectedProvider === 'openai') {
            const analysis = await this.openaiService.analyzeJournalEntry(entry, goals);
            return {
                analysis,
                aiProvider: 'openai'
            };
        }
        else {
            // Modo 'auto': Intentar OpenAI primero, luego Gemini
            return this.tryWithFallback(entry, goals);
        }
    }
    async tryWithFallback(entry, goals) {
        console.log('üîÑ Modo autom√°tico: Intentando OpenAI primero...');
        try {
            // Intentar con OpenAI primero
            const openaiAnalysis = await this.openaiService.analyzeJournalEntry(entry, goals);
            // Si la respuesta contiene "simulaci√≥n", significa que OpenAI no est√° disponible
            if (openaiAnalysis.includes('simulaci√≥n de OpenAI') || openaiAnalysis.includes('an√°lisis de respaldo')) {
                console.log('üîÑ OpenAI no disponible, intentando con Gemini...');
                const geminiAnalysis = await this.geminiService.analyzeJournalEntry(entry, goals);
                return {
                    analysis: geminiAnalysis,
                    aiProvider: geminiAnalysis.includes('an√°lisis de respaldo') ? 'local' : 'gemini'
                };
            }
            console.log('‚úÖ An√°lisis completado con OpenAI');
            return {
                analysis: openaiAnalysis,
                aiProvider: 'openai'
            };
        }
        catch (error) {
            console.log('üîÑ Error con OpenAI, intentando con Gemini...', error);
            try {
                const geminiAnalysis = await this.geminiService.analyzeJournalEntry(entry, goals);
                console.log('‚úÖ An√°lisis completado con Gemini como fallback');
                return {
                    analysis: geminiAnalysis,
                    aiProvider: geminiAnalysis.includes('an√°lisis de respaldo') ? 'local' : 'gemini'
                };
            }
            catch (geminiError) {
                console.error('‚ùå Ambos servicios fallaron:', geminiError);
                // √öltima opci√≥n: an√°lisis local
                return {
                    analysis: this.getLocalFallbackAnalysis(entry, goals),
                    aiProvider: 'local'
                };
            }
        }
    }
    getLocalFallbackAnalysis(entry, goals) {
        console.log('üîÑ Usando an√°lisis local como √∫ltimo recurso...');
        const goalsList = goals.length > 0
            ? goals.map(g => `<strong>${g}</strong>`).join(', ')
            : 'tus objetivos personales';
        return `
      <h4>An√°lisis B√°sico de tu Reflexi√≥n</h4>
      <p>He procesado tu entrada de manera local. Aunque no puedo acceder a servicios de IA avanzados en este momento, puedo ofrecerte algunas reflexiones basadas en ${goalsList}.</p>
      
      <h4>Observaciones Generales</h4>
      <p>Tu capacidad de reflexionar por escrito es un excelente h√°bito para el crecimiento personal. El simple acto de poner tus pensamientos en palabras ya es un paso valioso hacia una mayor autoconciencia.</p>
      
      <h4>Sugerencia Pr√°ctica</h4>
      <ul>
        <li>Contin√∫a escribiendo regularmente. La consistencia en la reflexi√≥n personal es m√°s valiosa que la perfecci√≥n de cada entrada individual.</li>
        <li>Considera revisar tus entradas anteriores semanalmente para identificar patrones y progreso.</li>
      </ul>
      
      <p><strong>Nota:</strong> Este es un an√°lisis b√°sico local. Para obtener insights m√°s profundos y personalizados, configura una API key de OpenAI o Gemini en las variables de entorno del servidor.</p>
    `;
    }
    // M√©todo para cambiar el proveedor preferido
    setPreferredProvider(provider) {
        this.preferredProvider = provider;
        console.log(`üìã Proveedor cambiado a: ${provider}`);
    }
    // M√©todo para obtener el proveedor actual
    getPreferredProvider() {
        return this.preferredProvider;
    }
}
exports.AIAnalysisService = AIAnalysisService;
//# sourceMappingURL=ai-analysis.service.js.map